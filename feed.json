{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "",
    "icon": "http://example.com/images/favicon.ico",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/09/04/Makefile/",
            "url": "http://example.com/2024/09/04/Makefile/",
            "title": "Makefile",
            "date_published": "2024-09-04T09:18:42.000Z",
            "content_html": "<h1 id=\"makefile简介\"><a class=\"anchor\" href=\"#makefile简介\">#</a> Makefile 简介</h1>\n<p>​\tmake 和 Makefile 是 Linux 以及其他 Unix-like 系统中非常重要的工具，它们主要用于自动化编译和构建过程。通过学习和掌握 make 和 Makefile，可以极大地提高软件开发过程中的编译效率和自动化水平。</p>\n<p>​\tmake 是一个命令行工具，用于解释和执行 Makefile 中的指令。当你运行 make 命令时，它会查找当前目录下的 Makefile（或 makefile，注意大小写、GNUmakefile）文件，并根据其中的指令来编译或构建项目。</p>\n<p>​\t当你运行 make 命令时，它默认会查找名为 Makefile（大写 M）的文件。如果该文件不存在，但存在一个名为 makefile（小写 m）的文件，make 通常不会使用它，除非你明确指定了文件名。使用 make -f XXX 命令指定文件</p>\n<h1 id=\"make命令工作流程\"><a class=\"anchor\" href=\"#make命令工作流程\">#</a> make 命令工作流程</h1>\n<ol>\n<li><strong>读取 Makefile</strong>：make 首先读取当前目录下的 Makefile (makefile,GNUmakefile)。</li>\n<li><strong>确定默认目标</strong>：如果没有指定具体目标，make<strong> 会尝试构建第一个目标</strong>（通常是可执行文件）。</li>\n<li><strong>检查依赖性</strong>：对于每个目标，make 会检查其依赖文件是否比目标文件新。如果依赖文件更新，或者目标不存在，make 就会执行相应的规则来重建目标。</li>\n<li><strong>执行命令</strong>：根据规则中的命令编译或链接文件，直到所有目标都最新为止。</li>\n</ol>\n<h1 id=\"makefile使用\"><a class=\"anchor\" href=\"#makefile使用\">#</a> Makefile 使用</h1>\n<p>​\tMakefile 是一个包含一系列构建规则的文件，它告诉 make 命令如何编译和链接源代码以生成可执行文件或库。Makefile 中定义了各种目标（target）、依赖（dependency）和命令（command）</p>\n<h2 id=\"常用符号\"><a class=\"anchor\" href=\"#常用符号\">#</a> 常用符号</h2>\n<p><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注释符号</span></span><br><span class=\"line\">:=  即时求值，变量在赋值时计算其值，之后引用不会再变化</span><br><span class=\"line\">=  延迟求值，每次引用变量时都会重新计算</span><br><span class=\"line\">?=  条件赋值操作符，用于在变量未被定义时才进行赋值；如果变量已经有值，则不会改变原来的值</span><br><span class=\"line\">+=  追加赋值操作符，用于将值追加到现有的变量值末尾</span><br><span class=\"line\">$  用来引用变量和特殊字符</span><br><span class=\"line\">$$  用来在 Makefile 的命令行中表示一个单独的 $ 字符。因为单个 $ 是特殊字符，用于变量替换，$$ 允许在命令行中输出一个 $ eg. @echo $$$$    <span class=\"comment\"># 输出: $</span></span><br><span class=\"line\">*  通配符，匹配任何字符或字符串</span><br><span class=\"line\">?  通配符匹配单个字符</span><br><span class=\"line\">[...]  匹配方括号中出现的任何字符</span><br><span class=\"line\">%  通配符，匹配文件名的相同部分，用于简化规则定义</span><br><span class=\"line\"><span class=\"variable\">$@</span>  目标文件</span><br><span class=\"line\"><span class=\"variable\">$^</span>  所有依赖文件</span><br><span class=\"line\"><span class=\"variable\">$&lt;</span>  第一个依赖文件</span><br><span class=\"line\"><span class=\"variable\">$?</span>  列出比目标文件更新的依赖文件</span><br><span class=\"line\"><span class=\"variable\">$+</span>  列出所有依赖文件的列表（包括重复项）</span><br><span class=\"line\"><span class=\"variable\">$*</span>  匹配模式中主体文件名的部分，不包括扩展名</span><br><span class=\"line\">&gt;  输出重定向，将命令的输出写入文件（会覆盖文件内容）</span><br><span class=\"line\">&gt;&gt;  追加重定向，将命令的输出追加到文件末尾（不会覆盖现有内容）</span><br><span class=\"line\">&lt;  输入重定向，将文件内容作为命令的输入</span><br><span class=\"line\">    </span><br><span class=\"line\">重定向是将命令的输入或输出从默认位置（通常是屏幕或标准输入）转移到其他位置</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件语句\"><a class=\"anchor\" href=\"#条件语句\">#</a> 条件语句</h2>\n<p>​\tMakefile 支持条件语句，可以根据不同的条件执行不同的命令。条件语句的一般形式是：这里 ifeq 是一个条件指令，它比较两个参数是否相等。如果相等，则执行 commands；否则，执行 alternate commands（如果有的话）。</p>\n<p><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ifeq</span> (arg1, arg2)</span><br><span class=\"line\">   commands</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">   alternate commands</span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<p><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#------------------------------------下面都是在定义变量--------------------------------------</span></span><br><span class=\"line\">CC := $&#123;T_CC&#125;</span><br><span class=\"line\">BIM := hello_world</span><br><span class=\"line\">RM = rm -rf</span><br><span class=\"line\">CP = cp -R</span><br><span class=\"line\">ROOT_PATH = $&#123;PWD&#125;  <span class=\"comment\">#没有提到的可能是其他文件定义的，并传进来的参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">OUT_PATH := $&#123;ROOT_PATH&#125;/out</span><br><span class=\"line\"></span><br><span class=\"line\">SYSTEM_BIM_PATH = $&#123;T_ROOTFS_BIN_PATH&#125;</span><br><span class=\"line\">SYSTEM_LIB_PATH = $&#123;T_ROOTFS_LIB_PATH&#125;</span><br><span class=\"line\">SYSTEM_SCR_PATH = $&#123;T_ROOTFS_SCR_PATH&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># $(shell command)用于执行shell命令</span></span><br><span class=\"line\"><span class=\"comment\"># -e 在shell中测试文件或者目录是否存在， ！ -e 表示文件或目录不存在</span></span><br><span class=\"line\"><span class=\"comment\">#所以这句话意思是如果OUT_PATH目录不存在，则创建OUT_PATH目录，并设置权限为 775</span></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">shell</span> <span class=\"built_in\">if</span> [ ! -e $&#123;OUT_PATH&#125; ]; then mkdir -m 775 $&#123;OUT_PATH&#125;; fi)</span></span><br><span class=\"line\"></span><br><span class=\"line\">INC_ROOT_PATH =</span><br><span class=\"line\">INC_FLAGS := $&#123;INC_ROOT_PATH&#125;</span><br><span class=\"line\">INCDIRS := <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> -I, <span class=\"variable\">$(INC_FLAGS)</span>)</span> <span class=\"comment\">#addprefix用于添加前缀，即给INC_FLAGS所指的文件添加 -I前缀，这里为空</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">LIB_ROOT_PATH = </span><br><span class=\"line\">LD_FLAGS := $&#123;LIB_ROOT_PATH&#125;</span><br><span class=\"line\">LDDIRS := <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> -L, <span class=\"variable\">$(LD_FLAGS)</span>)</span> <span class=\"comment\">#添加 -L前缀</span></span><br><span class=\"line\"></span><br><span class=\"line\">LIBS := </span><br><span class=\"line\">LIBDIRS := <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> -l, <span class=\"variable\">$(LIBS)</span>)</span> <span class=\"comment\">#添加 -l前缀</span></span><br><span class=\"line\"></span><br><span class=\"line\">SRC_ROOT_PATH = .</span><br><span class=\"line\">SRC_FLAGS := $&#123;SRC_ROOT_PATH&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MFLAGS := MD P F</span><br><span class=\"line\"><span class=\"comment\"># -MMD 生成 .d 依赖文件，但不生成 .d 文件的 .o 文件的规则。 </span></span><br><span class=\"line\"><span class=\"comment\"># -MP 为每个目标生成一个伪目标，以避免因删除目标文件而导致的错误。 </span></span><br><span class=\"line\"><span class=\"comment\"># -MF 指定依赖文件的输出路径和文件名。通常它会用目标文件名的 .d 文件作为依赖文件的名字。</span></span><br><span class=\"line\">MFS := <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> -M, <span class=\"variable\">$(MFLAGS)</span>)</span></span><br><span class=\"line\"><span class=\"comment\"># -fno-strict-aliasing：禁用严格别名规则。</span></span><br><span class=\"line\"><span class=\"comment\"># -O3：启用高级优化。 -g3：生成详细的调试信息。 -Wall：启用所有警告。 -c：仅编译，不链接。</span></span><br><span class=\"line\">CFLAGS := -fno-strict-aliasing -O3 -g3 -Wall -c $&#123;MFS&#125;</span><br><span class=\"line\">OFLAGS := -fno-strict-aliasing -O3 -g3 -Wall -o</span><br><span class=\"line\"><span class=\"comment\">#----------------------------------------------------------------------------------------</span></span><br><span class=\"line\">.PHONY : all clean cleanall install unistall <span class=\"comment\"># .PHONY 伪目标，表示不是实际的文件名，而是用于执行某些操作的命令或规则。这样如果同名的文件已经存在，仍然会执行命令</span></span><br><span class=\"line\"></span><br><span class=\"line\">all : $&#123;OUT_PATH&#125;/$&#123;BIN&#125;  <span class=\"comment\"># all 目标文件  $&#123;OUT_PATH&#125;/$&#123;BIN&#125; 依赖文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># foreach 遍历 dir临时变量，类似于for循环里的i wildcard 在指定目录中查找</span></span><br><span class=\"line\"><span class=\"comment\"># 这句话的意思是 遍历SRC_FLAGS目录中的子目录，并查找所有子目录下的 .c文件，赋值给CSRC</span></span><br><span class=\"line\">CSRC = <span class=\"variable\">$(<span class=\"built_in\">foreach</span> <span class=\"built_in\">dir</span>, <span class=\"variable\">$(SRC_FLAGS)</span>, $(<span class=\"built_in\">wildcard</span> <span class=\"variable\">$(dir)</span>/*.c)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#notdir 用于从文件路径中移除目录部分，只保留文件名</span></span><br><span class=\"line\"><span class=\"comment\">#这句话的意思是将CSRC中的.c扩展名转换为.o，然后移除目录部分，再在前面加上OUT_PATH/前缀</span></span><br><span class=\"line\"><span class=\"comment\">#即令OBJECTS等于OUT_PATH/目录下与CSRC相同名字的.o文件</span></span><br><span class=\"line\">OBJECTS = <span class=\"variable\">$(<span class=\"built_in\">addprefix</span> <span class=\"variable\">$(OUT_PATH)</span>/, $(<span class=\"built_in\">notdir</span> $(CSRC:.C=.O)</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># vpath 指定文件的搜索路径</span></span><br><span class=\"line\"><span class=\"comment\"># sort 对这些路径进行排序并去重</span></span><br><span class=\"line\"><span class=\"comment\">#这句话表示在CSRC路径下查找所有.c文件</span></span><br><span class=\"line\"><span class=\"keyword\">vpath</span> %.c <span class=\"variable\">$(<span class=\"built_in\">sort</span> $(<span class=\"built_in\">dir</span> <span class=\"variable\">$(CSRC)</span>)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># filter用于筛选 从OBJECTS中筛选出.o文件构建文件列表 该文件依赖于OUT_PATH的.o文件，.o文件又依赖于.c文件</span></span><br><span class=\"line\"><span class=\"variable\">$(<span class=\"built_in\">filter</span> %.o, $&#123;OBJECTS&#125;)</span> : $&#123;OUT_PATH&#125;/%.o:%.c</span><br><span class=\"line\">\t<span class=\"comment\"># 根据.o文件生成对应的.d文件</span></span><br><span class=\"line\">\t<span class=\"variable\">$(CC)</span> $&#123;INCDIRS&#125; $&#123;LDDIRS&#125; $&#123;CFLAGS&#125; $(@:%.O=%d) -MT <span class=\"variable\">$@</span> -O <span class=\"variable\">$@</span> <span class=\"variable\">$&lt;</span> $&#123;LIBDIRS&#125; <span class=\"comment\">#缩进一定要用Tab，不能用空格，会报错</span></span><br><span class=\"line\"><span class=\"comment\">#  目标文件             依赖文件</span></span><br><span class=\"line\"><span class=\"variable\">$(OUT_PATH)</span>/$&#123;BIN&#125; : $&#123;OBJECTS&#125;</span><br><span class=\"line\">\t$&#123;CC&#125; $&#123;OFLAGS&#125; <span class=\"variable\">$@</span> <span class=\"variable\">$^</span> $&#123;INCDIRS&#125; $&#123;LDDIRS&#125; $&#123;LIBDIRS&#125; <span class=\"comment\">#根据依赖文件编译生成目标文件</span></span><br><span class=\"line\">\t<span class=\"variable\">$(<span class=\"built_in\">shell</span> $&#123;CC&#125; -v)</span> <span class=\"comment\"># 执行shell命令$&#123;CC&#125; -v</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\"># RM = rm -rf</span></span><br><span class=\"line\"><span class=\"comment\"># @隐藏命令输出</span></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">\t@<span class=\"variable\">$(RM)</span> $&#123;OUT_PATH&#125;/*.o $&#123;OUT_PATH&#125;/*.d <span class=\"comment\">#删除.o .d文件</span></span><br><span class=\"line\"><span class=\"section\">cleanall:</span></span><br><span class=\"line\">\t@<span class=\"variable\">$(RM)</span> $&#123;OUT_PATH&#125;/*.o $&#123;OUT_PATH&#125;/*.d $&#123;OUT_PATH&#125;/$&#123;BIN&#125; <span class=\"comment\">#删除.o .d文件和子目录BIN</span></span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "编程基础",
                "Makefile"
            ]
        },
        {
            "id": "http://example.com/2024/09/02/OpenWrt%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2024/09/02/OpenWrt%E7%AE%80%E4%BB%8B/",
            "title": "OpenWrt简介",
            "date_published": "2024-09-02T08:51:39.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>​\tOpenWrt 项目是一个针对嵌入式设备的 Linux 操作系统。OpenWrt 不是一个单一且不可更改的固件，而是提供了具有软件包管理功能的完全可写的文件系统。这使您可以从供应商提供的应用范围和配置中解脱出来，并且让您通过使用适配任何应用的软件包来定制设备。对于开发人员来说，OpenWrt 是一个无需围绕它构建完整固件就能开发应用程序的框架；对于普通用户来说，这意味着拥有了完全定制的能力，能以意想不到的方式使用该设备。</p>\n<h1 id=\"openwrt与一般linux系统的区别\"><a class=\"anchor\" href=\"#openwrt与一般linux系统的区别\">#</a> OpenWrt 与一般 linux 系统的区别</h1>\n<h2 id=\"目的与用途\"><a class=\"anchor\" href=\"#目的与用途\">#</a> 目的与用途</h2>\n<ul>\n<li><strong>OpenWrt</strong>:\n<ul>\n<li>专门为嵌入式设备（特别是路由器和其他网络设备）设计。</li>\n<li>提供丰富的网络功能，如防火墙、路由、VPN、无线管理等。</li>\n<li>轻量级和优化，适合资源有限的硬件。</li>\n<li>通常用于家庭和企业网络环境中，作为固件来替换设备原有的操作系统。</li>\n</ul>\n</li>\n<li><strong>一般 Linux 系统</strong>:\n<ul>\n<li>通常是为桌面计算机、服务器、工作站等设计的。</li>\n<li>提供广泛的功能和应用支持，适用于各种用途。</li>\n<li>可能需要更多的系统资源（如 CPU 和内存）。</li>\n<li>包括常见的发行版如 Ubuntu、Fedora、CentOS 等，用于各种应用场景，从桌面环境到数据中心服务器。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件系统和存储\"><a class=\"anchor\" href=\"#文件系统和存储\">#</a> 文件系统和存储</h2>\n<ul>\n<li><strong>OpenWrt</strong>:\n<ul>\n<li>通常使用只读文件系统或只读根文件系统（例如 squashfs），以提高稳定性和安全性。</li>\n<li>配置文件和日志文件通常存储在可读写的部分（如 jffs2 或 overlay 文件系统）。</li>\n</ul>\n</li>\n<li><strong>一般 Linux 系统</strong>:\n<ul>\n<li>使用全读写的文件系统，如 ext4、xfs、btrfs 等。</li>\n<li>系统可以非常灵活地管理文件和存储设备。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"软件包管理\"><a class=\"anchor\" href=\"#软件包管理\">#</a> 软件包管理</h2>\n<ul>\n<li><strong>OpenWrt</strong>:\n<ul>\n<li>使用  <code>opkg</code>  包管理器来安装、更新和删除软件包。</li>\n<li>主要关注网络相关软件和轻量级应用。</li>\n<li>软件包通常经过专门优化，以适应资源有限的设备。</li>\n</ul>\n</li>\n<li><strong>一般 Linux 系统</strong>:\n<ul>\n<li>使用各种包管理器，如  <code>apt</code> （Debian/Ubuntu）、 <code>yum</code> / <code>dnf</code> （CentOS/Fedora）、 <code>zypper</code> （openSUSE）等。</li>\n<li>提供广泛的软件包和应用程序，覆盖各种用途。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户界面\"><a class=\"anchor\" href=\"#用户界面\">#</a> 用户界面</h2>\n<ul>\n<li><strong>OpenWrt</strong>:\n<ul>\n<li>通常通过 Web 界面（LuCI）进行配置和管理。</li>\n<li>命令行界面也可用，但通常用于高级配置和调试。</li>\n</ul>\n</li>\n<li><strong>一般 Linux 系统</strong>:\n<ul>\n<li>提供图形用户界面（如 GNOME、KDE）和命令行界面。</li>\n<li>用户可以根据需求选择和配置不同的桌面环境和应用程序。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统结构\"><a class=\"anchor\" href=\"#系统结构\">#</a> 系统结构</h2>\n<ul>\n<li><strong>OpenWrt</strong>:\n<ul>\n<li>内核和驱动程序针对网络硬件进行优化，支持广泛的路由器和网络设备。</li>\n<li>有时会进行内核裁剪，以减少内存占用和提高性能。</li>\n</ul>\n</li>\n<li><strong>一般 Linux 系统</strong>:\n<ul>\n<li>提供广泛的硬件支持，适用于各种计算设备和外围设备。</li>\n<li>内核通常包含更多的功能和驱动程序，以支持各种硬件和用途。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置与管理\"><a class=\"anchor\" href=\"#配置与管理\">#</a> 配置与管理</h2>\n<ul>\n<li><strong>OpenWrt</strong>:\n<ul>\n<li>配置文件通常存储在  <code>/etc/config</code>  目录下，使用 UCI（Unified Configuration Interface）进行管理。</li>\n<li>配置更改通常需要使用  <code>uci</code>  工具并提交更改。</li>\n</ul>\n</li>\n<li><strong>一般 Linux 系统</strong>:\n<ul>\n<li>配置文件分散在多个目录（如  <code>/etc</code> ）中。</li>\n<li>许多配置文件采用标准格式，如  <code>ini</code> 、 <code>yaml</code>  或  <code>json</code> ，并且可能需要手动编辑</li>\n</ul>\n</li>\n</ul>\n<p>​\t总体来说，OpenWrt 是一个专为嵌入式设备设计的 Linux 发行版，重点在于网络功能和优化，而一般 Linux 系统则更为通用，旨在支持广泛的应用和硬件设备。</p>\n<h1 id=\"openwrt系统概述\"><a class=\"anchor\" href=\"#openwrt系统概述\">#</a> OpenWrt 系统概述</h1>\n<h2 id=\"openwrt目录结构\"><a class=\"anchor\" href=\"#openwrt目录结构\">#</a> OpenWrt 目录结构</h2>\n<p><img data-src=\"C:%5CUsers%5C86176%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240902214155382.png\" alt=\"image-20240902214155382\" /></p>\n<ul>\n<li>config：存放整个系统的配置文件</li>\n<li>include：openwrt 的.mk 文件都放在这里</li>\n<li>package：存放软件包，自己添加的应用层包也可以放在这里</li>\n<li>target：openwrt 的源码可以编译出各个平台适用的二进制文件，各平台在这个目录里定义了 firmware 和 kernel 的编译过程</li>\n<li>script：存放了一些脚本，使用了 bash, python, perl 等多种脚本语言；编译过程中，用于第三方软件包管理的 feeds 文件也是在这个目录当中。在编译过程中，使用到的脚本也统一放在这个目录中</li>\n<li>toolchain：交叉编译链软件包</li>\n<li>tools：编译时，主机需要使用一些工具软件，tools 里包含了获取和编译这些工具的命令。软件包里面有 Makefile 文件</li>\n<li>feeds：默认的 feeds 下载有 packages、management、luci、routing、telephony。安装软件包步骤如下：\n<ul>\n<li>开源码根目录下面的 feeds.conf.default 文件，去掉相应软件包前面的 #号</li>\n<li>更新源: ./scripts/feeds update -a</li>\n<li>安装下载好的包: ./scripts/feeds install –a</li>\n</ul>\n</li>\n<li>build_dir：下面包含三个文件夹，编译时将在这几个文件夹中展开软件包进行编译\n<ul>\n<li>host：该文件夹中编译主机使用的工具软件</li>\n<li>toolchain-XXX：编译交叉工具链将在这个目录下展开并编译</li>\n<li>target-XXX：目标平台的软件包和内核将在这里展开并进行编译</li>\n</ul>\n</li>\n<li>bin：编译完成的 .bin .ipk 二进制文件将被保存在这里</li>\n<li>dl：编译过程中下载的源代码包保存在这里</li>\n<li>tmp：编译过程中产生的大量临时文件 (依赖关系) 被保存在这里</li>\n<li>staging_dir：下面的子目录和 build_dir 相同，用于保存在 build_dir 中展开编译的编译结果</li>\n<li>logs：编译过程中产生错误就会有这个目录，用于存放错误信息</li>\n</ul>\n<h2 id=\"openwrt固件编译过程\"><a class=\"anchor\" href=\"#openwrt固件编译过程\">#</a> OpenWrt 固件编译过程</h2>\n<ol>\n<li>\n<p>配置：make menuconfig 选择需要的平台和需要的工具模块</p>\n</li>\n<li>\n<p>下载：下载所有选中的软件代码压缩包</p>\n</li>\n<li>\n<p>编译工具：对 toolchain 和 tools 进行编译，编译得到的软件会在后续编译过程中被使用</p>\n</li>\n<li>\n<p>编译 ipk：</p>\n<p>1）对内核模块进行编译，部分内核模块形成独立 ipk</p>\n<p>2）编译 target 目录下的各个软件包成为 ipk</p>\n<p>3）编译 package 目录下的各个软件包成为 ipk，并安装到文件系统中</p>\n</li>\n<li>\n<p>编译内核：编译内核，压缩内核，用 mkimage 工具在内核前生成一个 bootloader 可以识别的头部</p>\n</li>\n<li>\n<p>固件打包：将文件系统和内核链接，制成镜像文件</p>\n</li>\n</ol>\n<h3 id=\"单编译某个组件\"><a class=\"anchor\" href=\"#单编译某个组件\">#</a> 单编译某个组件</h3>\n<ul>\n<li>内核模块：make package/kernel/linux/compile</li>\n<li>内核：make target/linux/compile</li>\n<li>Package：make package/xxx/{clean,prepare,compile} V=s</li>\n</ul>\n<h2 id=\"openwrt三大组件\"><a class=\"anchor\" href=\"#openwrt三大组件\">#</a> OpenWrt 三大组件</h2>\n<ul>\n<li>内核：OpenWrt 使用 Linux 内核，这使得它可以支持多种硬件平台和设备。内核负责管理系统的硬件资源，包括 CPU、内存和输入输出设备。</li>\n<li>用户空间程序：这些程序提供了系统的主要功能，包括各种服务、应用程序和配置工具。OpenWrt 的用户空间程序通常包括网络配置工具、文件系统管理工具、以及各种应用程序（如  <code>dnsmasq</code> 、 <code>firewall</code> 、 <code>opkg</code>  包管理器等）。</li>\n<li>软件包管理系统：OpenWrt 使用  <code>opkg</code>  作为其包管理器，这允许用户从软件仓库中安装、更新和删除软件包。 <code>opkg</code>  是一个轻量级的包管理系统，用于管理和配置 OpenWrt 系统上的各种软件包和应用程序。</li>\n</ul>\n",
            "tags": [
                "OpenWrt",
                "OpenWrt"
            ]
        },
        {
            "id": "http://example.com/2024/09/02/cgi%E6%95%99%E7%A8%8B/",
            "url": "http://example.com/2024/09/02/cgi%E6%95%99%E7%A8%8B/",
            "title": "cgi教程",
            "date_published": "2024-09-02T03:44:12.000Z",
            "content_html": "<h1 id=\"cgi简介\"><a class=\"anchor\" href=\"#cgi简介\">#</a> CGI 简介</h1>\n<p>​\tcgi 是一个网关协议，按照 CGI 协议规定的数据格式，进行数据的处理（接收数据，输出数据)。存在目的是为了使 web 能够有动态页面的处理能力。是网站上实现动态页面的最简单和常用的方法。</p>\n<h1 id=\"获取数据\"><a class=\"anchor\" href=\"#获取数据\">#</a> 获取数据</h1>\n<ul>\n<li>\n<p>通过环境变量获取（GET 方式）</p>\n</li>\n<li>\n<p>stdin（POST 方式）</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>REQUEST_METHOD</td>\n<td>请求类型，如 “GET” 或 “POST”</td>\n</tr>\n<tr>\n<td>CONTENT_TYPE</td>\n<td>被发送数据的类型</td>\n</tr>\n<tr>\n<td>CONTENT_LENGTH</td>\n<td>客户端向标准输入设备发送的数据长度，单位为字节</td>\n</tr>\n<tr>\n<td>QUERY_STRING</td>\n<td>查询参数，如：name=admin&amp;passwd=123</td>\n</tr>\n<tr>\n<td>REMOTE_ADDR</td>\n<td>发送此次请求的主机 IP</td>\n</tr>\n<tr>\n<td>REMOTE_HOST</td>\n<td>发送此次请求的主机名</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>环境变量</td>\n<td>意义</td>\n</tr>\n<tr>\n<td>-----------------</td>\n<td>--------------------------------</td>\n</tr>\n<tr>\n<td>SCRIPT_NAME</td>\n<td>CGI 脚本程序名称</td>\n</tr>\n<tr>\n<td>PATH_INFO</td>\n<td>CGI 脚本程序附加路径</td>\n</tr>\n<tr>\n<td>PATH_TRANSLATED</td>\n<td>PATH_INFO 对应的绝对路径</td>\n</tr>\n<tr>\n<td>REMOTE_USER</td>\n<td>已被验证合法的用户名</td>\n</tr>\n<tr>\n<td>REMOTE_IDENT</td>\n<td>WEB 服务器的登录用户名</td>\n</tr>\n<tr>\n<td>AUTH_TYPE</td>\n<td>验证类型</td>\n</tr>\n<tr>\n<td>GATEWAY_INTERFACE</td>\n<td>服务器遵守的 CGI 版本，如：CGI/1.1</td>\n</tr>\n<tr>\n<td>SERVER_NAME</td>\n<td>服务器主机名、域名或 IP</td>\n</tr>\n<tr>\n<td>SERVER_PORT</td>\n<td>服务器端口号</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"get方式获取\"><a class=\"anchor\" href=\"#get方式获取\">#</a> GET 方式获取</h2>\n<ol>\n<li>通过环境变量：REQUEST_METHOD 来判断是否是 GET 方式</li>\n<li>从环境变量：QUERY_STRING 获取数据</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *pQuery = NULL;</span><br><span class=\"line\">char *pMethod = NULL;</span><br><span class=\"line\">pMethod = getenv(&quot;REQUEST_METHOD&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!strcmp(pMethod, &quot;GET&quot;))&#123;</span><br><span class=\"line\">\tpQuery = getenv(&quot;QUERY_STRING&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"post方式获取\"><a class=\"anchor\" href=\"#post方式获取\">#</a> POST 方式获取</h2>\n<ol>\n<li>通过环境变量：REQUEST_METHOD 来判断是否是 POST 方式</li>\n<li>从环境变量：CONTENT_LENGTH 获取数据长度 n</li>\n<li>从 stdin 中读取 n 个字节的数据</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *pQuery = NULL;</span><br><span class=\"line\">char *pMethod = NULL;</span><br><span class=\"line\">pMethod = getenv(&quot;REQUEST_METHOD&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!strcmp(pMethod, &quot;POST&quot;))&#123;</span><br><span class=\"line\">\tlen = atoi(getenv(&quot;CONTENT_LENGTH&quot;));</span><br><span class=\"line\">\tfgets(pQuery，len+1,stdin);\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"输出数据\"><a class=\"anchor\" href=\"#输出数据\">#</a> 输出数据</h2>\n<ol>\n<li>输出数据要和输出头部相匹配</li>\n<li>通过标准输出 stdout 进行数据的输出</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sprintf(output_buff, &quot;Content-Type: application/json\\r\\n\\r\\n&quot; \\</span><br><span class=\"line\">        &quot;&#123;&quot; \\</span><br><span class=\"line\">        &quot;\\r\\&quot;status\\&quot;:0,&quot; \\</span><br><span class=\"line\">        &quot;\\r\\&quot;msg\\&quot;:username or password incorrect&quot; \\</span><br><span class=\"line\">        &quot;\\r&#125;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">websWrite(stdout, T(&quot;%s&quot;), output_buff);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h2>\n<ul>\n<li>传入 {&quot;Name&quot;:&quot;bai&quot;,&quot;Id&quot;:&quot;123456&quot;} 得到具体的个人信息</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#define MAX_QUERY_LENGTH 1024</span><br><span class=\"line\">const char *json_get_string_value_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *string_json = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;string_json);</span><br><span class=\"line\">    if (NULL == string_json)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (json_type_string == json_object_get_type(string_json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return json_object_get_string(string_json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int json_get_int_value_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *int_json = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;int_json);</span><br><span class=\"line\">    if (NULL == int_json)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (json_type_int == json_object_get_type(int_json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (int)json_object_get_int(int_json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const char *json_get_string_value(struct json_object *json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (json_type_string == json_object_get_type(json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return json_object_get_string(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">struct json_object *json_get_json_object_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *json_obj = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;json_obj);</span><br><span class=\"line\">    if (NULL == json_obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return json_obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int json_is_array(struct json_object *json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (json_type_array == json_object_get_type(json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">void handle()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar query[2048];</span><br><span class=\"line\">\tsize_t content_length;</span><br><span class=\"line\">\tchar  *content_length_str = getenv(&quot;CONTENT_LENGTH&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(content_length_str == NULL)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;&#123;\\&quot;error\\&quot;:1,\\&quot;message\\&quot;:\\&quot;missing COBTENT_LENGTH\\&quot;&#125;\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcontent_length = (size_t)atoi(content_length_str);</span><br><span class=\"line\">\tif (content_length &gt;= MAX_QUERY_LENGTH) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;&#123;\\&quot;error\\&quot;:1,\\&quot;message\\&quot;:\\&quot;Request too large\\&quot;&#125;\\n&quot;);</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfread(query, 1, content_length, stdin);</span><br><span class=\"line\">\tquery[content_length] = &#x27;\\0&#x27;; // Null-terminate</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//query = &quot;&#123;&quot;Name&quot;:&quot;bai&quot;,&quot;Id&quot;:&quot;123456&quot;,&quot;Mes&quot;:&#123;&quot;age&quot;:&quot;20&quot;,&quot;tel&quot;:&quot;123456&quot;&#125;&#125;&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tstruct json_object *myjson = json_tokener_parse(query);</span><br><span class=\"line\"></span><br><span class=\"line\">\tconst char* name = json_get_string_value_by_field(myjson,&quot;Name&quot;);</span><br><span class=\"line\">\tconst char* id = json_get_string_value_by_field(myjson,&quot;Id&quot;);</span><br><span class=\"line\">\tif(!strcmp(name,&quot;bai&quot;) &amp;&amp; !strcmp(id,&quot;123456&quot;))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;&#123;\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;  \\&quot;Name\\&quot;: \\&quot;bai\\&quot;,\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;  \\&quot;Id\\&quot;: \\&quot;123456\\&quot;,\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;  \\&quot;Mes\\&quot;: &#123;\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;    \\&quot;age\\&quot;: \\&quot;20\\&quot;,\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;    \\&quot;tel\\&quot;: \\&quot;123456\\&quot;\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;  &#125;\\n&quot;</span><br><span class=\"line\">\t\t\t&quot;&#125;\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;&#123;\\&quot;error\\&quot;:1,\\&quot;message\\&quot;:\\&quot;find  filed\\&quot;&#125;\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tjson_object_put(myjson);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    // Check request method</span><br><span class=\"line\">    const char *method = getenv(&quot;REQUEST_METHOD&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Print HTTP header</span><br><span class=\"line\">    printf(&quot;Content-Type: application/json\\n\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (method != NULL &amp;&amp; strcmp(method, &quot;POST&quot;) == 0) &#123;</span><br><span class=\"line\">        handle();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>通过传入不同的 action 进行不同的操作，如获取信息和修改信息</li>\n</ul>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">#define MAX_QUERY_LENGTH 1024</span><br><span class=\"line\">#define MAX_BUFFER 512</span><br><span class=\"line\">//从键值里获取对应的string数据</span><br><span class=\"line\">const char *json_get_string_value_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *string_json = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;string_json);</span><br><span class=\"line\">    if (NULL == string_json)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (json_type_string == json_object_get_type(string_json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return json_object_get_string(string_json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从键值里获取对应的int数据</span><br><span class=\"line\">int json_get_int_value_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *int_json = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;int_json);</span><br><span class=\"line\">    if (NULL == int_json)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (json_type_int == json_object_get_type(int_json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (int)json_object_get_int(int_json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const char *json_get_string_value(struct json_object *json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (json_type_string == json_object_get_type(json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return json_object_get_string(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从键值里获取对应的json数据</span><br><span class=\"line\">struct json_object *json_get_json_object_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *json_obj = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;json_obj);</span><br><span class=\"line\">    if (NULL == json_obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return json_obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int json_is_array(struct json_object *json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (json_type_array == json_object_get_type(json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从命令里获取信息</span><br><span class=\"line\">void execute_command(const char* command, char* arr, int size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    char buffer[MAX_BUFFER];</span><br><span class=\"line\">    size_t current_size = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    //使用popen打开管道，然后执行command传入的指令</span><br><span class=\"line\">    fp = popen(command, &quot;r&quot;);</span><br><span class=\"line\">    if(fp == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;popen failed\\n&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //从管道中读取一行内容存入到buffer中</span><br><span class=\"line\">    while(fgets(buffer, sizeof(buffer) - 1, fp) != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        size_t len = strlen(buffer);</span><br><span class=\"line\">        //检查是否有足够空间</span><br><span class=\"line\">        if(current_size + len &lt; size - 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            strcpy(arr + current_size, buffer);</span><br><span class=\"line\">            current_size += len;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buffer[size] = &#x27;\\0&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //关闭管道</span><br><span class=\"line\">    if(pclose(fp) == -1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;pclose failed\\n&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 从配置文件中读取指定键的值</span><br><span class=\"line\">int get_value_from_config(const char *file_path, const char *key, char *value, size_t max_buffer) &#123;</span><br><span class=\"line\">    FILE *file = fopen(file_path, &quot;r&quot;);</span><br><span class=\"line\">    if (file == NULL) &#123;</span><br><span class=\"line\">        perror(&quot;Failed to open file&quot;);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    char line[MAX_BUFFER];</span><br><span class=\"line\">    int found = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (fgets(line, sizeof(line), file) != NULL) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        //查找是否有对应的值</span><br><span class=\"line\">        char *pos = strstr(line, key);</span><br><span class=\"line\"></span><br><span class=\"line\">        //有的话去除 = ：</span><br><span class=\"line\">        if (pos != NULL) &#123;</span><br><span class=\"line\">            pos += strlen(key);</span><br><span class=\"line\">            while (*pos == &#x27; &#x27; || *pos == &#x27;=&#x27; || *pos == &#x27;:&#x27;) pos++;</span><br><span class=\"line\">            char *end = strpbrk(pos, &quot;\\r\\n&quot;);</span><br><span class=\"line\">            if (end != NULL) *end = &#x27;\\0&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">            strncpy(value, pos, max_buffer - 1);</span><br><span class=\"line\">            value[max_buffer - 1] = &#x27;\\0&#x27;;</span><br><span class=\"line\">            fclose(file);</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(file);</span><br><span class=\"line\">    return -1;  // Key not found</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void handle_post()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char query[MAX_QUERY_LENGTH]; //存储传入的json格式数据</span><br><span class=\"line\">    size_t content_length;</span><br><span class=\"line\">    char *content_length_str = getenv(&quot;CONTENT_LENGTH&quot;); //获取客户端向标准输入设备发送的数据长度，单位为子节</span><br><span class=\"line\">    struct json_object *response = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    content_length = (size_t)atoi(content_length_str); //将一个字符串转换为整数</span><br><span class=\"line\">    if(content_length &gt;= MAX_QUERY_LENGTH)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;&#123;\\&quot;error\\&quot;:1,\\&quot;message\\&quot;:\\&quot;Request too large\\&quot;&#125;\\n&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fread(query, 1, content_length, stdin);//使用 fread 函数从标准输入（stdin）读取数据，并存储在 query 指向的内存区域中</span><br><span class=\"line\">    //query: 这是一个指向要存储读取数据的内存区域的指针。</span><br><span class=\"line\">\t//1: 每次读取的块大小，以字节为单位。</span><br><span class=\"line\">\t//content_length: 要读取的总字节数。</span><br><span class=\"line\">\t//stdin: 标准输入流。</span><br><span class=\"line\">        </span><br><span class=\"line\">    query[content_length] = &#x27;\\0&#x27;; // 终止符</span><br><span class=\"line\">    struct json_object *myjson = json_tokener_parse(query); //根据json字符串创建json对象</span><br><span class=\"line\">    const char* action = json_get_string_value_by_field(myjson,&quot;ATC&quot;);</span><br><span class=\"line\">    if(!strcmp(action,&quot;GetDHCP&quot;)) //获取参数</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        char ipaddr[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char netmask[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char start[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char limit[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char leasetime[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        //获取信息</span><br><span class=\"line\">        execute_command(&quot;uci get network.lan.ipaddr&quot;, ipaddr, MAX_BUFFER);</span><br><span class=\"line\">        execute_command(&quot;uci get network.lan.netmask&quot;, netmask, MAX_BUFFER);</span><br><span class=\"line\">        execute_command(&quot;uci get dhcp.lan.start&quot;, start, MAX_BUFFER);</span><br><span class=\"line\">        execute_command(&quot;uci get dhcp.lan.limit&quot;, limit, MAX_BUFFER);</span><br><span class=\"line\">        execute_command(&quot;uci get dhcp.lan.leasetime&quot;, leasetime, MAX_BUFFER);</span><br><span class=\"line\"></span><br><span class=\"line\">        response = json_object_new_object(); //创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">        //把信息转为json格式并添加到json对象中</span><br><span class=\"line\">        json_object_object_add(response, &quot;ipaddr&quot;, json_object_new_string(ipaddr));</span><br><span class=\"line\">        json_object_object_add(response, &quot;netmask&quot;, json_object_new_string(netmask));</span><br><span class=\"line\">        json_object_object_add(response, &quot;start&quot;, json_object_new_string(start));</span><br><span class=\"line\">        json_object_object_add(response, &quot;limit&quot;, json_object_new_string(limit));</span><br><span class=\"line\">        json_object_object_add(response, &quot;leasetime&quot;, json_object_new_string(leasetime));</span><br><span class=\"line\">        json_object_object_add(response, &quot;error&quot;, json_object_new_int(0));</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;,json_object_to_json_string(response));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(!strcmp(action,&quot;GetVersion&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        char openwrt[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char kernel[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char fw_version[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char full_fw_version[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">        char vendar_version[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//获取信息</span><br><span class=\"line\">        execute_command(&quot;cat /etc/openwrt_version&quot;, openwrt, MAX_BUFFER);</span><br><span class=\"line\">        execute_command(&quot;uname -r&quot;, kernel, MAX_BUFFER);</span><br><span class=\"line\">        get_value_from_config(&quot;/etc/system_version.info&quot;, &quot;FULL_FW_VERSION&quot;, full_fw_version, MAX_BUFFER);</span><br><span class=\"line\">        get_value_from_config(&quot;/etc/system_version.info&quot;, &quot;FW_VERSION&quot;, fw_version, MAX_BUFFER);</span><br><span class=\"line\">        get_value_from_config(&quot;/etc/system_version.info&quot;, &quot;VENDOR_ASKEY_VERSION&quot;, vendar_version, MAX_BUFFER);</span><br><span class=\"line\"></span><br><span class=\"line\">        response = json_object_new_object(); //创建对象</span><br><span class=\"line\"></span><br><span class=\"line\">        //把信息转为json格式并添加到json对象中</span><br><span class=\"line\">        json_object_object_add(response, &quot;openwrt&quot;, json_object_new_string(openwrt));</span><br><span class=\"line\">        json_object_object_add(response, &quot;kernel&quot;, json_object_new_string(kernel));</span><br><span class=\"line\">        json_object_object_add(response, &quot;fw_version&quot;, json_object_new_string(fw_version));</span><br><span class=\"line\">        json_object_object_add(response, &quot;full_fw_version&quot;, json_object_new_string(full_fw_version));</span><br><span class=\"line\">        json_object_object_add(response, &quot;vendar_version&quot;, json_object_new_string(vendar_version));</span><br><span class=\"line\">        json_object_object_add(response, &quot;error&quot;, json_object_new_int(0));</span><br><span class=\"line\">        printf(&quot;%s\\n&quot;,json_object_to_json_string(response));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(!strcmp(action,&quot;GetWifi&quot;))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">            char wifi_device[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">            char wifi_network[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">            char wifi_mode[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">            char wifi_ssid[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">            char wifi_encryption[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">            char wifi_key[MAX_BUFFER] = &#123;0&#125;;</span><br><span class=\"line\">            </span><br><span class=\"line\">            //获取信息</span><br><span class=\"line\">            execute_command(&quot;uci get wireless.wla.device&quot;, wifi_device, MAX_BUFFER);</span><br><span class=\"line\">            execute_command(&quot;uci get wireless.wla.network&quot;,wifi_network , MAX_BUFFER);</span><br><span class=\"line\">            execute_command(&quot;uci get wireless.wla.mode&quot;, wifi_mode, MAX_BUFFER);</span><br><span class=\"line\">            execute_command(&quot;uci get wireless.wla.ssid&quot;, wifi_ssid, MAX_BUFFER);</span><br><span class=\"line\">            execute_command(&quot;uci get wireless.wla.encryption&quot;, wifi_encryption, MAX_BUFFER);</span><br><span class=\"line\">            execute_command(&quot;uci get wireless.wla.key&quot;, wifi_key, MAX_BUFFER);</span><br><span class=\"line\"></span><br><span class=\"line\">            response = json_object_new_object();</span><br><span class=\"line\">            //把信息转为json格式并添加到json对象中</span><br><span class=\"line\">            json_object_object_add(response, &quot;wifi_device&quot;, json_object_new_string(wifi_device));</span><br><span class=\"line\">            json_object_object_add(response, &quot;wifi_network&quot;, json_object_new_string(wifi_network));</span><br><span class=\"line\">            json_object_object_add(response, &quot;wifi_mode&quot;, json_object_new_string(wifi_mode));</span><br><span class=\"line\">            json_object_object_add(response, &quot;wifi_ssid&quot;, json_object_new_string(wifi_ssid));</span><br><span class=\"line\">            json_object_object_add(response, &quot;wifi_encryption&quot;, json_object_new_string(wifi_encryption));</span><br><span class=\"line\">            json_object_object_add(response, &quot;wifi_key&quot;, json_object_new_string(wifi_key));</span><br><span class=\"line\">            json_object_object_add(response, &quot;error&quot;, json_object_new_int(0));</span><br><span class=\"line\"></span><br><span class=\"line\">            printf(&quot;%s\\n&quot;, json_object_to_json_string(response));</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    else if(!strcmp(&quot;SetDHCP&quot;,action)) //修改参数</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        char cmd[512] = &#123;0&#125;; //存储命令的数组</span><br><span class=\"line\">        int error = 0;//记录错误数量</span><br><span class=\"line\">        </span><br><span class=\"line\">        //读取将修改的参数</span><br><span class=\"line\">        char* ipaddr = json_get_string_value_by_field(myjson,&quot;ipaddr&quot;);</span><br><span class=\"line\">        if(ipaddr == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* netmask = json_get_string_value_by_field(myjson,&quot;netmask&quot;);</span><br><span class=\"line\">        if(netmask == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* start = json_get_string_value_by_field(myjson,&quot;start&quot;);</span><br><span class=\"line\">        if(start == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* limit = json_get_string_value_by_field(myjson,&quot;limit&quot;);</span><br><span class=\"line\">        if(limit == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* leasetime = json_get_string_value_by_field(myjson,&quot;leasetime&quot;);</span><br><span class=\"line\">        if(leasetime == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//sprintf将格式化的数据写入一个字符串中，但是不输出。 返回写入 str 的字符总数，不包括终止的空字符（&#x27;\\0&#x27;）</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set network.lan.ipaddr=%s&quot;, ipaddr); //将命令存储到cmd中</span><br><span class=\"line\">        system(cmd); //调用系统的命令解释器来执行传入的 cmd 字符串中的命令</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512); //清理缓冲区，将cmd所指向的512个子节的内容初始化为0</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set network.lan.netmask=%s&quot;, netmask);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set dhcp.lan.start=%s&quot;, start);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set dhcp.lan.limit=%s&quot;, limit);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set dhcp.lan.leasetime=%s&quot;, leasetime);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        system(&quot;uci commit&quot;); //提交更改</span><br><span class=\"line\">        printf(&quot;&#123;\\&quot;error\\&quot;:%d&#125;\\n&quot;,error);</span><br><span class=\"line\">        system(&quot;/etc/init.d/network restart&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else if(!strcmp(&quot;SetWifi&quot;,action))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        char cmd[512] = &#123;0&#125;;</span><br><span class=\"line\">        int error = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        char* wifi_device = json_get_string_value_by_field(myjson,&quot;wifi_device&quot;);</span><br><span class=\"line\">        if(wifi_device == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* wifi_network = json_get_string_value_by_field(myjson,&quot;wifi_network&quot;);</span><br><span class=\"line\">        if(wifi_network == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* wifi_mode = json_get_string_value_by_field(myjson,&quot;wifi_mode&quot;);</span><br><span class=\"line\">        if(wifi_mode == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* wifi_ssid = json_get_string_value_by_field(myjson,&quot;wifi_ssid&quot;);</span><br><span class=\"line\">        if(wifi_ssid == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        char* wifi_key = json_get_string_value_by_field(myjson,&quot;wifi_key&quot;);</span><br><span class=\"line\">        if(wifi_key == NULL)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            error++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        sprintf(cmd,&quot;uci set wireless.wla.device=%s&quot;, wifi_device);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set wireless.wla.network=%s&quot;, wifi_network);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set wireless.wla.mode=%s&quot;, wifi_mode);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set wireless.wla.ssid=%s&quot;, wifi_ssid);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        memset(cmd,0,512);</span><br><span class=\"line\">        sprintf(cmd,&quot;uci set wireless.wla.key=%s&quot;, wifi_key);</span><br><span class=\"line\">        system(cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        system(&quot;uci commit&quot;);</span><br><span class=\"line\">        printf(&quot;&#123;\\&quot;error\\&quot;:%d&#125;\\n&quot;,error);</span><br><span class=\"line\">        system(&quot;/etc/init.d/network restart&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;&#123;\\&quot;error\\&quot;:1,\\&quot;message\\&quot;:\\&quot;find  filed\\&quot;&#125;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    if(response != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        json_object_put(response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(myjson != NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        json_object_put(myjson);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() &#123;</span><br><span class=\"line\">    // Check request method</span><br><span class=\"line\">    const char *method = getenv(&quot;REQUEST_METHOD&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // Print HTTP header</span><br><span class=\"line\">    printf(&quot;Content-Type: application/json\\n\\n&quot;); //输出请求头格式</span><br><span class=\"line\"></span><br><span class=\"line\">    if (method != NULL &amp;&amp; strcmp(method, &quot;POST&quot;) == 0) &#123;</span><br><span class=\"line\">        handle_post();</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "OpenWrt",
                "cgi"
            ]
        },
        {
            "id": "http://example.com/2024/09/02/json-c/",
            "url": "http://example.com/2024/09/02/json-c/",
            "title": "json-c",
            "date_published": "2024-09-02T01:56:20.000Z",
            "content_html": "<h1 id=\"json\"><a class=\"anchor\" href=\"#json\">#</a> json</h1>\n<p>​\tJSON（JavaScript Object Notation, JS 对象简谱）是一种轻量级的数据交换格式。它基于 ECMAScript（European Computer Manufacturers Association, 欧洲计算机协会制定的 js 规范）的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p>\n<p>​\t所以在有 web 或者 app 的项目中，前端很大概率会使用到 json 来传输数据，后端解析 json 有很多库可以选择，在 C 和 C++ 中我使用不同的库，这次介绍在 C 中使用的 json-c。</p>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>json 结构体数据类型如下：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">json_type</span> &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">/* If you change this, be sure to update json_type_to_name() too */</span></span><br><span class=\"line\">  json_type_null,</span><br><span class=\"line\">  json_type_boolean,</span><br><span class=\"line\">  json_type_double,</span><br><span class=\"line\">  json_type_int,</span><br><span class=\"line\">  json_type_object,</span><br><span class=\"line\">  json_type_array,</span><br><span class=\"line\">  json_type_string,</span><br><span class=\"line\">&#125; json_type;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"创建json\"><a class=\"anchor\" href=\"#创建json\">#</a> 创建 json</h1>\n<p>创建 json 的具体方法如下：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_object</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_tokener_parse</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *str)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_boolean</span><span class=\"params\">(json_bool b)</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_double</span><span class=\"params\">(<span class=\"type\">double</span> d)</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_int</span><span class=\"params\">(<span class=\"type\">int32_t</span> i)</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_int64</span><span class=\"params\">(<span class=\"type\">int64_t</span> i)</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_array</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">struct</span> json_object* <span class=\"title function_\">json_object_new_string</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *s)</span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>json_object_new_object 是创建一个 json 对象，对象内容为空</li>\n<li>json_tokener_parse 是根据 json 字符串创建 json 对象，对象根据字符串生成</li>\n<li>其余根据名称可以看出是创建不同的 json 对象</li>\n</ul>\n<h1 id=\"添加对象\"><a class=\"anchor\" href=\"#添加对象\">#</a> 添加对象</h1>\n<p>添加对象的方法如下：</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> <span class=\"title function_\">json_object_object_add</span><span class=\"params\">(<span class=\"keyword\">struct</span> json_object* obj, <span class=\"type\">const</span> <span class=\"type\">char</span> *key, <span class=\"keyword\">struct</span> json_object *val)</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"type\">int</span> <span class=\"title function_\">json_object_array_add</span><span class=\"params\">(<span class=\"keyword\">struct</span> json_object* obj, <span class=\"keyword\">struct</span> json_object *val)</span>;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>obj: 要被添加的 json_object 对象</li>\n<li>key: 字段名称</li>\n<li>val: 与 key 关联的 json_object 对象</li>\n</ul>\n<h1 id=\"解析json\"><a class=\"anchor\" href=\"#解析json\">#</a> 解析 json</h1>\n<p>解析 json 的方法如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern json_bool json_object_object_get_ex(struct json_object* obj, const char *key, struct json_object **value);</span><br><span class=\"line\"></span><br><span class=\"line\">extern enum json_type json_object_get_type(struct json_object *obj);</span><br><span class=\"line\"></span><br><span class=\"line\">extern const char* json_object_to_json_string(struct json_object *obj);</span><br><span class=\"line\"></span><br><span class=\"line\">extern json_bool json_object_get_boolean(struct json_object *obj);</span><br><span class=\"line\">extern double json_object_get_double(struct json_object *obj);</span><br><span class=\"line\">extern int32_t json_object_get_int(struct json_object *obj);</span><br><span class=\"line\">extern int64_t json_object_get_int64(struct json_object *obj);</span><br><span class=\"line\">extern const char* json_object_get_string(struct json_object *obj);</span><br><span class=\"line\">extern int json_object_array_length(struct json_object *obj);</span><br><span class=\"line\">extern struct array_list* json_object_get_array(struct json_object *obj);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>json_object_object_get_ex 是根据 key 值获取一个 json 对象，返回值代表是否成功</li>\n<li>json_object_get_type 是判断 json 对象的类型</li>\n<li>json_object_to_json_string 是将 json 对象转换为字符串</li>\n<li>其余根据名称可以看出是根据 key 获取不同的 value</li>\n</ul>\n<h1 id=\"释放空间\"><a class=\"anchor\" href=\"#释放空间\">#</a> 释放空间</h1>\n<p>使用下列函数释放空间：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extern int json_object_put(struct json_object *obj);</span><br></pre></td></tr></table></figure></p>\n<p>使用创建 json 方法后都需要释放 json 对象，释放时只需要释放根对象即可。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json_tokener.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json_object.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json_inttypes.h&gt;</span><br><span class=\"line\">#include &lt;json-c/json_util.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">//将json对象中，key为p_field的string内容提取出来</span><br><span class=\"line\">const char *json_get_string_value_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *string_json = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;string_json);</span><br><span class=\"line\">    if (NULL == string_json)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (json_type_string == json_object_get_type(string_json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return json_object_get_string(string_json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//将json对象中，key为p_field的int内容提取出来</span><br><span class=\"line\">int json_get_int_value_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *int_json = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;int_json);</span><br><span class=\"line\">    if (NULL == int_json)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (json_type_int == json_object_get_type(int_json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return (int)json_object_get_int(int_json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//从json对象中获取字符串的值</span><br><span class=\"line\">const char *json_get_string_value(struct json_object *json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (json_type_string == json_object_get_type(json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return json_object_get_string(json);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//将json对象中，key为p_field的子json内容内容提取出来</span><br><span class=\"line\">struct json_object *json_get_json_object_by_field(struct json_object *json, const char *p_field)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *json_obj = NULL;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_get_ex(json, p_field, &amp;json_obj);</span><br><span class=\"line\">    if (NULL == json_obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;json_object_object_get error %s&quot;, p_field);</span><br><span class=\"line\">        return NULL;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return json_obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//从json对象中获取数组的值</span><br><span class=\"line\">int json_is_array(struct json_object *json)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (json_type_array == json_object_get_type(json))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    return -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void printFunc(struct json_object *Carl)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (Carl == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const char *name;</span><br><span class=\"line\">    int age;</span><br><span class=\"line\">    struct json_object *PhoneArray = NULL;</span><br><span class=\"line\">    name = json_get_string_value_by_field(Carl, &quot;name&quot;);</span><br><span class=\"line\">    age = json_get_int_value_by_field(Carl, &quot;age&quot;);</span><br><span class=\"line\">    PhoneArray = json_get_json_object_by_field(Carl, &quot;phone&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    printf(&quot;name:%s\\nage:%d\\n&quot;, name, age);</span><br><span class=\"line\">    printf(&quot;phone num:\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (0 == json_is_array(PhoneArray))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (int i = 0; i &lt; json_object_array_length(PhoneArray); i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%s\\n&quot;, json_object_get_string(json_object_array_get_idx(PhoneArray, i)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    struct json_object *Carl = NULL;</span><br><span class=\"line\">    struct json_object *Sam = NULL;</span><br><span class=\"line\">    struct json_object *PhoneObject = NULL;</span><br><span class=\"line\">    char *root_json = &quot;&#123;\\&quot;name\\&quot;:\\&quot;Carl\\&quot;,\\&quot;age\\&quot;:24,\\&quot;phone\\&quot;:[\\&quot;12345678901\\&quot;,\\&quot;12345678902\\&quot;]&#125;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    Carl = json_tokener_parse(root_json);</span><br><span class=\"line\"></span><br><span class=\"line\">    printFunc(Carl);</span><br><span class=\"line\"></span><br><span class=\"line\">    Sam = json_object_new_object();</span><br><span class=\"line\">    if (Sam == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_object_add(Sam, &quot;name&quot;, json_object_new_string(&quot;Sam&quot;));</span><br><span class=\"line\">    json_object_object_add(Sam, &quot;age&quot;, json_object_new_int(21));</span><br><span class=\"line\"></span><br><span class=\"line\">    PhoneObject = json_object_new_array();</span><br><span class=\"line\">    if (PhoneObject == NULL)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      json_object_put(Sam);</span><br><span class=\"line\">      return -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    json_object_array_add(PhoneObject, json_object_new_string(&quot;12345678903&quot;));</span><br><span class=\"line\">    json_object_array_add(PhoneObject, json_object_new_string(&quot;12345678904&quot;));</span><br><span class=\"line\">    json_object_object_add(Sam, &quot;phone&quot;, PhoneObject);</span><br><span class=\"line\"></span><br><span class=\"line\">    printFunc(Sam);</span><br><span class=\"line\"></span><br><span class=\"line\">    json_object_put(Carl);</span><br><span class=\"line\">    json_object_put(Sam);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">打印：</span><br><span class=\"line\">name:Carl</span><br><span class=\"line\">age:24</span><br><span class=\"line\">phone num:</span><br><span class=\"line\">12345678901</span><br><span class=\"line\">12345678902</span><br><span class=\"line\">name:Sam</span><br><span class=\"line\">age:21</span><br><span class=\"line\">phone num:</span><br><span class=\"line\">12345678903</span><br><span class=\"line\">12345678904</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "OpenWrt",
                "json"
            ]
        },
        {
            "id": "http://example.com/2024/08/29/%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/",
            "url": "http://example.com/2024/08/29/%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5/",
            "title": "使用攻略",
            "date_published": "2024-08-29T11:24:27.000Z",
            "content_html": "<p>本记录仅供自己方便使用</p>\n<p>参考：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9meWZhbi5jbi8yMDI0LzAzLzA3L1Nob2thJUU0JUJEJUJGJUU3JTk0JUE4JUU4JTg3JUFBJUU1JUI3JUIxJUU3JTlBJTg0JUU1JTlCJUJFJUU1JUJBJThBLw==\">https://fyfan.cn/2024/03/07/Shoka 使用自己的图床 /</span></p>\n<h1 id=\"创建分类\"><a class=\"anchor\" href=\"#创建分类\">#</a> 创建分类</h1>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page XXX <span class=\"comment\">//创建分类</span></span><br><span class=\"line\">进入/source/XXX/index.md</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\">title: 分类名</span><br><span class=\"line\">type: categories <span class=\"comment\">//自己添加，表示这是类型是分类</span></span><br><span class=\"line\">------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">hexo n 文章名  <span class=\"comment\">//创建新文章</span></span><br><span class=\"line\">进入source/_posts/文件名.mk</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------</span><br><span class=\"line\">title: 文章名</span><br><span class=\"line\">date: <span class=\"number\">2020</span><span class=\"number\">-10</span><span class=\"number\">-27</span> <span class=\"number\">15</span>:<span class=\"number\">22</span>:<span class=\"number\">42</span></span><br><span class=\"line\">categories: 分类名</span><br><span class=\"line\">--------------------------</span><br></pre></td></tr></table></figure></p>\n<p>这样就完成了一个分类的创建了，并将博客归入 XXX 类中</p>\n<p>当然有些直接在文章中加入 categories 就行，可以先试一下。</p>\n<h1 id=\"文章封面图片显示设置\"><a class=\"anchor\" href=\"#文章封面图片显示设置\">#</a> 文章封面图片显示设置</h1>\n<h2 id=\"方法一最简单的就是把themesshoka_imagesyml-文件里的全换成http地址\"><a class=\"anchor\" href=\"#方法一最简单的就是把themesshoka_imagesyml-文件里的全换成http地址\">#</a> 方法一：最简单的就是把 <code>.\\themes\\shoka\\_images.yml</code>  文件里的全换成 <code>http</code>  地址</h2>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- https:<span class=\"comment\">//i.loli.net/2020/10/30/qAMYEFXxJcKRsiG.gif</span></span><br><span class=\"line\">- https:<span class=\"comment\">//i.loli.net/2020/10/30/rjdhcSgEN8COBPA.jpg</span></span><br><span class=\"line\">- https:<span class=\"comment\">//i.loli.net/2020/10/30/HKyzSd7NI3mlBpt.jpg</span></span><br><span class=\"line\">- https:<span class=\"comment\">//i.loli.net/2020/10/30/Y1CBXqgeokEs457.jpg</span></span><br><span class=\"line\">- https:<span class=\"comment\">//i.loli.net/2020/10/30/Z5W6r2BSoiThHG1.jpg</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"方法二shoka使用自己的图床\"><a class=\"anchor\" href=\"#方法二shoka使用自己的图床\">#</a> 方法二：Shoka 使用自己的图床</h2>\n<h3 id=\"1创建图床\"><a class=\"anchor\" href=\"#1创建图床\">#</a> 1. 创建图床</h3>\n<p>可以选择 Github 和 Gitee 作为图床，国内更推荐使用 Gitee 可以使用 PicGo 进行管理或者直接在网页上进行上传图片即可 (图片推荐使用 webp 格式) 关于</p>\n<p>PicGo 使用与配置方法： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tRG9jL3poL2d1aWRlLw==\">https://picgo.github.io/PicGo-Doc/zh/guide/</span></p>\n<p>如果想快速上手 Github 版可参考下方链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80ODkyMzY3Njk=\">https://zhuanlan.zhihu.com/p/489236769</span></p>\n<h3 id=\"2配置图床\"><a class=\"anchor\" href=\"#2配置图床\">#</a> 2. 配置图床</h3>\n<h4 id=\"step1\"><a class=\"anchor\" href=\"#step1\">#</a> Step1.</h4>\n<p>在 \\themes\\shoka\\scripts\\helpers\\engine.js 打开找到代码进行修改，修改如下</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var parseImage = function(img, size) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (img.startsWith(<span class=\"string\">&#x27;//&#x27;</span>) || img.startsWith(<span class=\"string\">&#x27;http&#x27;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> img</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//将这一块更换为自己图床的地址，更改时建议删除size</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span><span class=\"number\">&#x27;</span>https:<span class=\"comment\">//tva&#x27;+randomServer+&#x27;.sinaimg.cn/&#x27;+size+&#x27;/&#x27;+img      </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//更改后为：</span></span><br><span class=\"line\">  var parseImage = function(img, size) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (img.startsWith(<span class=\"string\">&#x27;//&#x27;</span>) || img.startsWith(<span class=\"string\">&#x27;http&#x27;</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> img</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;https://images.weserv.nl/?url=https://gitee.com/fufan1025/blog_img/raw/master/&#x27;</span>+img</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWFnZXMud2VzZXJ2Lm5sLz91cmw9JUU0JUI4JUJBJUU1JTlCJUJFJUU3JUJDJTkzJUU1JUFEJTk4JUU5JTkzJUJFJUU2JThFJUE1JUVGJUJDJThDJUU4JUFFJUE5JUU1JTlCJUJFJUU3JTg5JTg3JUU4JTgzJUJEJUU1JUE0JTlGJUU2JTlCJUI0JUU1JUJGJUFCJUU1JThBJUEwJUU4JUJEJUJE\">https://images.weserv.nl/?url = 为图缓存链接，让图片能够更快加载</span></p>\n<p>具体为：(图缓存链接) + <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLw==\">https://raw.githubusercontent.com/</span> 用户名 / 仓库名 /main（自己修改的分支名，默认为 main)/</p>\n<h4 id=\"step2\"><a class=\"anchor\" href=\"#step2\">#</a> Step2.</h4>\n<p>打开 PicGo, 将相册第二个模式设置为 URL 全选然后点击复制</p>\n<p>创建一个.txt 文件，将复制的内容黏贴进去</p>\n<p>里面会是一堆网页链接加数字，我们只需要后面的数字名称</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:<span class=\"comment\">//cdn.jsdelivr.net/gh/FuFan1025/blog-img/Konachan.jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将前面的链接复制，ctrl+F 全选替换为 - + 空格，(别忘了空格) 变成</span></span><br><span class=\"line\">- Konachan.jpg</span><br></pre></td></tr></table></figure></p>\n<p>我使用的图片数字名称</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- plane_sky_art_129149_1920x1080.webp</span><br><span class=\"line\">- girl_walk_anime_153292_2560x1080.webp</span><br><span class=\"line\">- girl_terrace_art_146601_2560x1080.webp</span><br><span class=\"line\">- girl_smile_umbrella_963266_1920x1200.webp</span><br><span class=\"line\">- girl_smile_stars_975800_2560x1080.webp</span><br><span class=\"line\">- girl_smile_flower_1035552_1920x1200.webp</span><br><span class=\"line\">- girl_sea_summer_941681_2560x1080.webp</span><br><span class=\"line\">- girl_river_sunset_1067581_2560x1080.webp</span><br><span class=\"line\">- girl_pose_smile_1011693_2560x1080.webp</span><br><span class=\"line\">- girl_platform_railway_140282_2560x1080.webp</span><br><span class=\"line\">- girl_island_building_207303_1920x1200.webp</span><br><span class=\"line\">- sakura_art_sky_122545_1920x1080.webp</span><br><span class=\"line\">- girl_halo_butterflies_923017_2560x1080.webp</span><br><span class=\"line\">- girl_hair_stars_1075468_2560x1080.webp</span><br><span class=\"line\">- girl_hair_shorts_1058776_1920x1080.webp</span><br><span class=\"line\">- girl_hair_glow_1021435_1920x1200.webp</span><br><span class=\"line\">- girl_hair_dress_1086036_2560x1080.webp</span><br><span class=\"line\">- girl_guitar_anime_141048_1920x1200.webp</span><br><span class=\"line\">- girl_grass_city_213102_1920x1080.webp</span><br><span class=\"line\">- girl_headphones_anime_1079499_1920x1200.webp</span><br><span class=\"line\">- girl_chair_window_866827_2560x1080.webp</span><br><span class=\"line\">- girl_buildings_city_1060155_1920x1200.webp</span><br><span class=\"line\">- girl_blonde_pose_1002941_2560x1080.webp</span><br><span class=\"line\">- girl_glow_magic_165898_2560x1080.webp</span><br><span class=\"line\">- girl_gesture_kimono_925253_2560x1080.webp</span><br><span class=\"line\">- girl_eyes_sunflowers_1013575_2560x1080.webp</span><br><span class=\"line\">- girl_eyes_dress_1122598_2560x1080.webp</span><br><span class=\"line\">- girl_ears_sky_994513_1920x1200.webp</span><br><span class=\"line\">- girl_bag_bus_917489_1920x1200.webp</span><br><span class=\"line\">- girl_backpack_road_1160862_1920x1080.webp</span><br><span class=\"line\">- girl_angel_sky_1216917_1920x1200.webp</span><br><span class=\"line\">- girl_angel_halo_991517_2560x1080.webp</span><br><span class=\"line\">- girl_blonde_cloak_1044103_1920x1200.webp</span><br><span class=\"line\">- child_river_dreams_127495_1920x1080.webp</span><br><span class=\"line\">- anime_girl_sky_162368_1920x1200.webp</span><br><span class=\"line\">- Konachan.webp</span><br><span class=\"line\">- fulilian.webp</span><br></pre></td></tr></table></figure></p>\n<p>将成品把 \\themes\\shoka_images.yml 中所有内容替换然后保存</p>\n<p>使用 Git 打开 hexo 根目录 输入 hexo cl &amp;&amp; hexo g &amp;&amp; hexo s 查看效果</p>\n",
            "tags": [
                "hexo使用攻略",
                "hexo使用攻略"
            ]
        }
    ]
}